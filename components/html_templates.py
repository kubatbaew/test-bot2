from decimal import Decimal
import math
from collections import defaultdict

from logic.get_client_goods import get_user_data, get_check_track_code_user

with open("components/html/description.html", "r", encoding="utf-8") as file:
    DESCRIPTION_MESSAGE = file.read()


with open("components/html/issue_info_next.html", "r", encoding="utf-8") as file:
    ISSUE_INFO_NEXT_MESSAGE = file.read()


with open("components/html/update_bot.html", "r", encoding="utf-8") as file:
    UPDATE_TEXT_BOT = file.read()


async def get_goods_client(goods_data):
    with open("components/html/issue_info.html", "r", encoding="utf-8") as file:
        ISSUE_INFO_MESSAGE = file.read()

    name = goods_data["client_data"]["name"]
    goods = goods_data["client_data"]["goods"]
    full_price = int(float(goods_data["client_data"]["full_price"].replace(",", ".")) // 1 + 1)
    full_height = goods_data["client_data"]["full_height"]

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    total_goods_count = len(goods)
    full_total_price = math.ceil(sum(float(good['price'].replace(",", ".")) for good in goods))
    full_height_price = round(float(sum(Decimal(good['height'].replace(",", ".")) for good in goods)), 2)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—Ä–∏–±—ã—Ç–∏—è
    grouped_goods = defaultdict(list)
    for item in goods:
        arrival_date = item.get("arrival_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã
        grouped_goods[arrival_date].append(item)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º
    goods_text = "<b>üì¶–¢–æ–≤–∞—Ä—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</b>\n\n"
    for date in sorted(grouped_goods.keys()):
        goods_text += f"<b>üóìÔ∏è–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è - {date}</b>\n\n"
        for item in grouped_goods[date]:
            weight = item['height'].replace(".", ",")
            price = math.ceil(float(item['price'].replace(",", ".")))
            goods_text += (
                f"–¢—Ä–µ–∫-–∫–æ–¥: {item['track_code']}\n"
                f"–í–µ—Å –ø–æ—Å—ã–ª–∫–∏: {weight} –∫–≥\n"
                f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {price} —Å–æ–º\n\n"
            )

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω
    content = ISSUE_INFO_MESSAGE.format(name, goods_data["client_data"]["KK"], full_total_price, full_height_price, total_goods_count, goods_text.strip())
    return content


async def get_send_data_message(data):
    with open("components/html/send_cargo_data.html", "r", encoding="utf-8") as file:
        SEND_DATA_TEMPLATE = file.read()

    content = SEND_DATA_TEMPLATE.format(
        data["data"]["data"]["wlOrder"]["waybillNumber"],
        data["data"]["data"]["wlOrder"]["quantity"],
    )
    for dt in data["data"]["data"]["wlMessageList"][::-1]:
        track_code = dt["orderId"]
        mess = dt["elsAddress"]
        date = dt["dateTime"]
        print(mess)
        if "–ö–æ–¥ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ" in mess:
            mess = (
                "–ü–æ—Å—ã–ª–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ –∏ —Å–µ–π—á–∞—Å –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."
            )
            content += f"\n<b>–í—Ä–µ–º—è: {date}</b>\n<b>–°—Ç–∞—Ç—É—Å:</b> <i>{mess}</i>\n"

        elif "—Å–∫–ª–∞–¥ –≤ –ë–∏—à–∫–µ–∫–µ" in mess:
            mess = ("–¢–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ë–∏—à–∫–µ–∫–µ –∏ –≤–æ—Ç-–≤–æ—Ç –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞. –ü–µ—Ä—Å–æ–Ω–∞–ª —É–≤–µ–¥–æ–º–∏—Ç –Ω–∞—à –æ—Ñ–∏—Å –ö–ê–†–ì–û –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ü–æ—Å—ã–ª–∫–∏ –¥–æ–µ–¥—É—Ç –Ω–∞ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤.")
            content += f"\n<b>–í—Ä–µ–º—è: {date}</b>\n<b>–°—Ç–∞—Ç—É—Å:</b> <i>{mess}</i>\n"

            if get_check_track_code_user(track_code):
                new_status = "–ü–æ—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–∏. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –µ–µ –ø–æ –∞–¥—Ä–µ—Å—É: –≥–æ—Ä–æ–¥ –û—à, —É–ª. –ö—É—Ä–º–∞–Ω–∂–∞–Ω –¥–∞—Ç–∫–∞ 236.\n\nhttps://go.2gis.com/5yJuh"
                content += f"\n<b>‚úÖ –°—Ç–∞—Ç—É—Å:</b> <i>{new_status}</i>\n"            
        else:
            content += f"\n<b>–í—Ä–µ–º—è: {date}</b>\n<b>–°—Ç–∞—Ç—É—Å:</b> <i>{mess}</i>\n"

    return content


async def get_goods_client_for_admin(goods_data):
    with open("components/html/admin_template.html", "r", encoding="utf-8") as file:
        ISSUE_INFO_MESSAGE_FOR_ADMIN = file.read()

    name = goods_data["client_data"]["name"]
    goods = goods_data["client_data"]["goods"]
    full_price = int(float(goods_data["client_data"]["full_price"].replace(",", ".")) // 1 + 1)
    full_height = goods_data["client_data"]["full_height"]

    full_total_price = math.ceil(sum(float(good['price'].replace(",", ".")) for good in goods))
    full_height_price = round(float(sum(Decimal(good['height'].replace(",", ".")) for good in goods)), 2)
    
    print(full_total_price)

    user_data = get_user_data(goods_data["client_data"]["KK"])
    surname = user_data[2]
    phone_number = user_data[3]

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    total_goods_count = len(goods)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø—Ä–∏–±—ã—Ç–∏—è
    grouped_goods = defaultdict(list)
    for item in goods:
        arrival_date = item.get("arrival_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")
        grouped_goods[arrival_date].append(item)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –ø–æ—Å—ã–ª–∫–∞–º–∏
    goods_text = ""
    for date in sorted(grouped_goods.keys()):
        goods_text += f"<b>üóìÔ∏è–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è - {date}</b>\n\n"
        for item in grouped_goods[date]:
            weight = item['height'].replace(".", ",")
            price = math.ceil(float(item['price'].replace(",", ".")))
            goods_text += (
                f"–¢—Ä–µ–∫-–∫–æ–¥: {item['track_code']}\n"
                f"–í–µ—Å –ø–æ—Å—ã–ª–∫–∏: {weight} –∫–≥\n"
                f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {price} —Å–æ–º\n\n"
            )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    content = ISSUE_INFO_MESSAGE_FOR_ADMIN.format(
        name, surname, phone_number, goods_data["client_data"]["KK"], full_total_price, full_height_price, total_goods_count, goods_text.strip()
    )

    return content
